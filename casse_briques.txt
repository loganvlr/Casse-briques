Ce qu'il faut faire pour le casse brique :
I - Ecran d'accueil
    1 - Afficher le titre du jeu
    2 - Afficher le bouton "Jouer"
        A - Afficher le bouton "Niveau 1"
        B - Afficher le bouton "Niveau 2"
        C - Afficher le bouton "Niveau 3"
        D - Afficher le mode de jeu "IA" (Au lieu d'avoir simplement un mur en face, il y aura une IA qui jouera contre le joueur. Elle protègera son mur et essayera de détruire celui du joueur)
    3 - Afficher le bouton "Options"
    4 - Afficher le bouton "Quitter"
    5 - Afficher le bouton "Aide"
    6 - Afficher le bouton "Scores"
II - Ecran de jeu
    1 - Afficher le bouton "Pause"
        A - Afficher le bouton "Reprendre"
        B - Afficher le bouton "Recommencer"
        C - Afficher le bouton "Quitter"
        D - Afficher le bouton "Aide"
    2 - Afficher le score du joueur (qui augmente à chaque fois qu'il touche/casse une brique. Il augmente plus si la brique est de résistance différente)
    3 - Afficher le nombre de vies du joueur (qui diminue à chaque fois que la balle touche le sol)
    4 - Afficher les briques
    5 - Afficher la plateforme du joueur
    6 - Afficher la balle
    7 - Afficher le mur de l'IA (si le mode de jeu est "IA")
    8 - Afficher la plateforme de l'IA (si le mode de jeu est "IA")


essayer de pouvoir créer des tableaux (+ pouvoir avoir le milieu de chaque partie du tableau, leur taille, etc.)


CHANGER NOM DE CLASSE NIVEAUX NIVEAU

fixer limite pour deplacement plateforme

faire que la balle ne puisse pas rester bloquée dans un coin

on peut avancer la plateforme ?


if rect_balle.colliderect(rect_brique):
                # Calcule les distances entre les côtés de la balle et de la brique
                if rect_balle.x + rect_balle.width >= rect_brique.x and rect_balle.x <= rect_brique.x + rect_brique.width and rect_balle.y + (rect_balle.height // 2) >= rect_brique.y and rect_balle.y + (rect_balle.height // 2) <= rect_brique.y + rect_brique.height:
                    cote_collision = "gauche"
                    print("gauche")
                elif rect_balle.x <= rect_brique.x + rect_brique.width and rect_balle.x + rect_balle.width >= rect_brique.x + rect_brique.width and rect_balle.y + (rect_balle.height // 2) >= rect_brique.y and rect_balle.y + (rect_balle.height // 2) <= rect_brique.y + rect_brique.height:
                    cote_collision = "droite"
                    print("droite")
                elif ((rect_balle.x >= rect_brique.x and rect_balle.x <= rect_brique.x + rect_brique.width) or (rect_balle.x + rect_balle.width >= rect_brique.x and rect_balle.x + rect_balle.width <= rect_brique.x + rect_brique.width)) and rect_balle.y + rect_balle.height <= rect_brique.y and rect_balle.y >= rect_brique.y:
                    cote_collision = "haut"
                    print("haut")
                elif ((rect_balle.x >= rect_brique.x and rect_balle.x <= rect_brique.x + rect_brique.width) or (rect_balle.x + rect_balle.width >= rect_brique.x and rect_balle.x + rect_balle.width <= rect_brique.x + rect_brique.width)) and rect_balle.y <= rect_brique.y + rect_brique.height and rect_balle.y + rect_balle.height >= rect_brique.y + rect_brique.height:
                    cote_collision = "bas"
                    print("bas")



for brique in self.briques:
            # Crée des rectangles pour la balle et la brique
            rect_balle = pygame.Rect(balle.x - balle.rayon, balle.y - balle.rayon, balle.largeur, balle.hauteur)
            rect_brique = pygame.Rect(brique.x, brique.y, brique.largeur, brique.hauteur)
            pygame.draw.rect(jeu.screen, (255, 0, 0), rect_balle)
            # Vérifie si les rectangles se chevauchent
            if rect_balle.colliderect(rect_brique):
                cote_collision = None
                # Calcule les distances entre les côtés de la balle et de la brique
                if rect_balle.x + rect_balle.width >= rect_brique.x and rect_balle.x <= rect_brique.x + rect_brique.width and rect_balle.y + (rect_balle.height // 2) >= rect_brique.y and rect_balle.y + (rect_balle.height // 2) <= rect_brique.y + rect_brique.height:
                    cote_collision = "gauche"
                    print("gauche")
                elif rect_balle.x <= rect_brique.x + rect_brique.width and rect_balle.x + rect_balle.width >= rect_brique.x + rect_brique.width and rect_balle.y + (rect_balle.height // 2) >= rect_brique.y and rect_balle.y + (rect_balle.height // 2) <= rect_brique.y + rect_brique.height:
                    cote_collision = "droite"
                    print("droite")
                elif ((rect_balle.x >= rect_brique.x and rect_balle.x <= rect_brique.x + rect_brique.width) or (rect_balle.x + rect_balle.width >= rect_brique.x and rect_balle.x + rect_balle.width <= rect_brique.x + rect_brique.width)) and rect_balle.y + rect_balle.height <= rect_brique.y and rect_balle.y >= rect_brique.y:
                    cote_collision = "haut"
                    print("haut")
                elif ((rect_balle.x >= rect_brique.x and rect_balle.x <= rect_brique.x + rect_brique.width) or (rect_balle.x + rect_balle.width >= rect_brique.x and rect_balle.x + rect_balle.width <= rect_brique.x + rect_brique.width)) and rect_balle.y <= rect_brique.y + rect_brique.height and rect_balle.y + rect_balle.height >= rect_brique.y + rect_brique.height:
                    cote_collision = "bas"
                    print("bas")
                else:
                    print("BOOOO")

                # Gère le rebond et déplace la balle à l'extérieur de la brique
                if cote_collision in ["gauche", "droite"]:
                    balle.rebond("horizontal")
                else:
                    balle.rebond("vertical")